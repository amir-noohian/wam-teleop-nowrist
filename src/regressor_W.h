//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// regressorz_W.h
//
// Code generation for function 'calculate_W'
//

// Include files
#include <eigen3/Eigen/Dense>
#include <array>
#include <cmath>

// Function Definitions
void calculate_W(const double q[4], const double dq[4],
                 const double ddq[4], double W[120])
{
    static const signed char Pb[1440] = {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        };

    double x0 = -ddq[0];
    double x1 = -dq[0];
    double x2 = cos(q[1]);
    double x3 = -x2;
    double x4 = x1*x3;
    double x5 = -x4;
    double x6 = dq[1]*x5;
    double x7 = sin(q[1]);
    double x8 = x0*x7 + x6;
    double x9 = x1*x7;
    double x10 = dq[1]*x9;
    double x11 = -x10;
    double x12 = x5*x9;
    double x13 = ((x9)*(x9));
    double x14 = ((dq[1])*(dq[1]));
    double x15 = x0*x3 + x10;
    double x16 = ((x4)*(x4));
    double x17 = x4*x9;
    double x18 = dq[1]*x4;
    double x19 = 9.8100000000000005*x2;
    double x20 = -9.8100000000000005*x7;
    double x21 = -x20;
    double x22 = cos(q[2]);
    double x23 = sin(q[2]);
    double x24 = ddq[1]*x23;
    double x25 = x22*x8;
    double x26 = dq[1]*x22;
    double x27 = x23*x9;
    double x28 = -x27;
    double x29 = x26 + x28;
    double x30 = -dq[2];
    double x31 = -x30;
    double x32 = x24 + x25 + x29*x31;
    double x33 = dq[1]*x23;
    double x34 = x22*x9;
    double x35 = x33 + x34;
    double x36 = -x35;
    double x37 = x30 + x5;
    double x38 = x36*x37;
    double x39 = -x23;
    double x40 = x29*x35;
    double x41 = -x40;
    double x42 = -ddq[2] - x15;
    double x43 = x41 + x42;
    double x44 = ((x35)*(x35));
    double x45 = ((x37)*(x37));
    double x46 = -x45;
    double x47 = x44 + x46;
    double x48 = x29*x37;
    double x49 = x32 + x48;
    double x50 = -x49;
    double x51 = x35*x37;
    double x52 = ddq[1]*x22;
    double x53 = x23*x8;
    double x54 = -x53;
    double x55 = x30*x35 + x52 + x54;
    double x56 = x51 + x55;
    double x57 = x22*x56;
    double x58 = -x48;
    double x59 = x32 + x58;
    double x60 = ((x29)*(x29));
    double x61 = -x44;
    double x62 = -x60 - x61;
    double x63 = -x42;
    double x64 = -x60;
    double x65 = x45 + x64;
    double x66 = x40 + x42;
    double x67 = -x38 - x55;
    double x68 = -x41;
    double x69 = 0.55000000000000004*x26 - 0.55000000000000004*x27;
    double x70 = x29*x69;
    double x71 = 0.044999999999999998*((x22)*(x22)) + 0.044999999999999998*((x23)*(x23));
    double x72 = -0.55000000000000004*x33 - 0.55000000000000004*x34 + x4*x71;
    double x73 = 0.044999999999999998*dq[2];
    double x74 = x72 + x73;
    double x75 = -x19;
    double x76 = x36*x73 + x52*x71 + x54*x71 + x75;
    double x77 = x36*x74 + x70 + x76;
    double x78 = x39*x77;
    double x79 = x46 + x64;
    double x80 = -0.55000000000000004*x23;
    double x81 = x40 + x63;
    double x82 = x39*x71;
    double x83 = 0.044999999999999998*ddq[2] + x15*x71 + x21*x23 - 0.55000000000000004*x24 - 0.55000000000000004*x25 + x30*x69;
    double x84 = x37*x69;
    double x85 = x26*x71 + x28*x71;
    double x86 = -x36*x85 + x83 - x84;
    double x87 = x35*x85 + x83 - x84;
    double x88 = x22*x87;
    double x89 = x20*x22 + x31*x72 + x5*x73 + 0.55000000000000004*x52 - 0.55000000000000004*x53;
    double x90 = x29*x85;
    double x91 = x37*x74;
    double x92 = -x89 + x90 - x91;
    double x93 = x51 - x55;
    double x94 = x61 + x64;
    double x95 = x35*x74 - x70 - x76;
    double x96 = x46 + x61;
    double x97 = -x32 + x48;
    double x98 = x89 - x90 + x91;
    double x99 = -x98;
    double x100 = cos(q[3]);
    double x101 = sin(q[3]);
    double x102 = -dq[3];
    double x103 = x101*x35;
    double x104 = -x100;
    double x105 = x104*x37;
    double x106 = x103 + x105;
    double x107 = x100*x32 + x101*x42 + x102*x106;
    double x108 = dq[3] + x29;
    double x109 = x100*x35 + x101*x37;
    double x110 = -x109;
    double x111 = x108*x110;
    double x112 = x100*x107 + x101*x111;
    double x113 = x106*x109;
    double x114 = -x101*x107 - x104*x111;
    double x115 = ddq[3] + x55;
    double x116 = -x113;
    double x117 = x115 + x116;
    double x118 = ((x109)*(x109));
    double x119 = ((x108)*(x108));
    double x120 = -x119;
    double x121 = x118 + x120;
    double x122 = x100*x117 + x101*x121;
    double x123 = x106*x108;
    double x124 = x107 + x123;
    double x125 = -x101*x117 - x104*x121;
    double x126 = x101*x32;
    double x127 = x104*x42;
    double x128 = dq[3]*x109 + x126 + x127;
    double x129 = x108*x109;
    double x130 = x128 + x129;
    double x131 = -x123;
    double x132 = x107 + x131;
    double x133 = x100*x130 + x101*x132;
    double x134 = ((x106)*(x106));
    double x135 = -x118;
    double x136 = x134 + x135;
    double x137 = x101*x130;
    double x138 = -x104*x132 - x137;
    double x139 = x100*x131 + x101*x129;
    double x140 = -x101*x131 - x104*x129;
    double x141 = -x134;
    double x142 = x119 + x141;
    double x143 = x113 + x115;
    double x144 = x101*x143;
    double x145 = x100*x142 + x144;
    double x146 = x111 + x128;
    double x147 = -x101*x142 - x104*x143;
    double x148 = x100*x123 + x101*x128;
    double x149 = -x101*x123 - x104*x128;
    double x150 = ((x100)*(x100));
    double x151 = ((x101)*(x101));
    double x152 = -0.044999999999999998*x150 - 0.044999999999999998*x151;
    double x153 = 0.044999999999999998*dq[3];
    double x154 = x110*x153 + x126*x152 + x127*x152 + x83;
    double x155 = x100*x69 + x101*x85;
    double x156 = x106*x155;
    double x157 = 0.044999999999999998*x150 + 0.044999999999999998*x151;
    double x158 = x101*x69 + x104*x85 + x157*x29;
    double x159 = x153 + x158;
    double x160 = x110*x159 + x154 + x156;
    double x161 = x101*x160;
    double x162 = x137*x152 + x161;
    double x163 = 0.044999999999999998*ddq[3] + dq[3]*x155 + x101*x89 + x104*x76 + x157*x55;
    double x164 = x108*x155;
    double x165 = x103*x152 + x105*x152 + x74;
    double x166 = x110*x165 - x163 + x164;
    double x167 = x113 - x115;
    double x168 = x157*x167 + x166;
    double x169 = x120 + x141;
    double x170 = x100*x169 + x101*x167;
    double x171 = x101*x169 + x104*x167;
    double x172 = x104*x160;
    double x173 = x104*x152;
    double x174 = -x130*x173 - x172;
    double x175 = x109*x165 + x163 - x164;
    double x176 = x100*x89 + x101*x76 + x102*x158 + x153*x29;
    double x177 = x106*x165;
    double x178 = x108*x159;
    double x179 = -x176 + x177 - x178;
    double x180 = x135 + x141;
    double x181 = x101*x152;
    double x182 = x100*x175 + x101*x179 + x180*x181;
    double x183 = x124*x157;
    double x184 = -x128 + x129;
    double x185 = x100*x184 + x101*x124;
    double x186 = x101*x184 + x104*x124;
    double x187 = x101*x175;
    double x188 = -x104*x179 - x173*x180 - x187;
    double x189 = x109*x159 - x154 - x156;
    double x190 = -x107 + x123;
    double x191 = x100*x189 + x181*x190;
    double x192 = x176 - x177 + x178;
    double x193 = x120 + x135;
    double x194 = x157*x193 + x192;
    double x195 = x100*x143 + x101*x193;
    double x196 = x104*x193 + x144;
    double x197 = -x101*x189 - x173*x190;
    double x198 = x152*x161;
    double x199 = x157*x175;
    double x200 = x100*x192 + x187;
    double x201 = x101*x192 + x104*x175;
    double x202 = -x152*x172;
    double x203 = x22*x66;
    double x204 = x22*x77;
    double x205 = x22*x71;
    //
    double H[192];
    H[0] = 0;
    H[1] = 0;
    H[2] = 0;
    H[3] = -x0;
    H[4] = 0;
    H[5] = 0;
    H[6] = 0;
    H[7] = 0;
    H[8] = 0;
    H[9] = 0;
    H[10] = dq[0];
    // H[11] = (((dq[0]) > 0) - ((dq[0]) < 0));
    H[11] = std::tanh(100.0 * dq[0]);
    H[12] = -x11*x3 - x7*x8;
    H[13] = -x3*(x13 - x14) - x7*(ddq[1] + x12);
    H[14] = -x3*(x6 + x8) - x7*(x10 + x15);
    H[15] = -x10*x3 - x6*x7;
    H[16] = -x3*(ddq[1] + x17) - x7*(x14 - x16);
    H[17] = -x15*x3 - x18*x7;
    H[18] = 0;
    H[19] = -x19*x7 - x21*x3;
    H[20] = 0;
    H[21] = 0;
    H[22] = 0;
    H[23] = 0;
    H[24] = -x3*x41 - x7*(x22*x32 + x38*x39);
    H[25] = -x3*x50 - x7*(x22*x43 + x39*x47);
    H[26] = -x3*x62 - x7*(x39*x59 + x57);
    H[27] = -x3*x63 - x7*(x22*x58 + x39*x51);
    H[28] = -x3*x67 - x7*(x22*x65 + x39*x66);
    H[29] = -x3*x68 - x7*(x22*x48 + x39*x55);
    H[30] = -x3*(x71*x81 + x86) - x7*(-0.55000000000000004*x22*x81 + x56*x82 + x78 + x79*x80);
    H[31] = -x3*x49*x71 - x7*(-0.55000000000000004*x22*x49 + x39*x92 + x80*x93 + x82*x94 + x88);
    H[32] = -x3*(x71*x96 + x99) - x7*(x22*x95 - 0.55000000000000004*x22*x96 + x66*x80 + x82*x97);
    H[33] = -x3*x71*x87 - x7*(x71*x78 + x80*x98 - 0.55000000000000004*x88);
    H[34] = 0;
    H[35] = 0;
    H[36] = -x114*x3 - x7*(x112*x22 + x113*x39);
    H[37] = -x125*x3 - x7*(x122*x22 + x124*x39);
    H[38] = -x138*x3 - x7*(x133*x22 + x136*x39);
    H[39] = -x140*x3 - x7*(x115*x39 + x139*x22);
    H[40] = -x147*x3 - x7*(x145*x22 + x146*x39);
    H[41] = -x149*x3 - x7*(x116*x39 + x148*x22);
    H[42] = -x3*(x130*x71 + x174) - x7*(-0.55000000000000004*x130*x22 + x162*x22 + x168*x39 + x170*x80 + x171*x82);
    H[43] = -x3*(x180*x71 + x188) - x7*(-0.55000000000000004*x180*x22 + x182*x22 + x183*x39 + x185*x80 + x186*x82);
    H[44] = -x3*(x190*x71 + x197) - x7*(-0.55000000000000004*x190*x22 + x191*x22 + x194*x39 + x195*x80 + x196*x82);
    H[45] = -x3*(x160*x71 + x202) - x7*(-0.55000000000000004*x160*x22 + x198*x22 + x199*x39 + x200*x80 + x201*x82);
    H[46] = 0;
    H[47] = 0;
    H[48] = 0;
    H[49] = 0;
    H[50] = 0;
    H[51] = 0;
    H[52] = 0;
    H[53] = 0;
    H[54] = 0;
    H[55] = 0;
    H[56] = 0;
    H[57] = 0;
    H[58] = 0;
    H[59] = 0;
    H[60] = x17;
    H[61] = x18 + x8;
    H[62] = -x13 + x16;
    H[63] = ddq[1];
    H[64] = x11 + x15;
    H[65] = x12;
    H[66] = x75;
    H[67] = 0;
    H[68] = x20;
    H[69] = 0;
    H[70] = dq[1];
    H[71] = (((dq[1]) > 0) - ((dq[1]) < 0));
    H[71] = std::tanh(100.0 * dq[1]);
    H[72] = x22*x38 + x23*x32;
    H[73] = x22*x47 + x23*x43;
    H[74] = x22*x59 + x23*x56;
    H[75] = x22*x51 + x23*x58;
    H[76] = x203 + x23*x65;
    H[77] = x22*x55 + x23*x48;
    H[78] = x204 + 0.55000000000000004*x22*x79 + x57*x71 + x80*x81;
    H[79] = x205*x94 + x22*x92 + 0.55000000000000004*x22*x93 + x23*x87 + x49*x80;
    H[80] = 0.55000000000000004*x203 + x205*x97 + x23*x95 + x80*x96;
    H[81] = x204*x71 + 0.55000000000000004*x22*x98 + x80*x87;
    H[82] = 0;
    H[83] = 0;
    H[84] = x112*x23 + x113*x22;
    H[85] = x122*x23 + x124*x22;
    H[86] = x133*x23 + x136*x22;
    H[87] = x115*x22 + x139*x23;
    H[88] = x145*x23 + x146*x22;
    H[89] = x116*x22 + x148*x23;
    H[90] = x130*x80 + x162*x23 + x168*x22 + 0.55000000000000004*x170*x22 + x171*x205;
    H[91] = x180*x80 + x182*x23 + x183*x22 + 0.55000000000000004*x185*x22 + x186*x205;
    H[92] = x190*x80 + x191*x23 + x194*x22 + 0.55000000000000004*x195*x22 + x196*x205;
    H[93] = x160*x80 + x198*x23 + x199*x22 + 0.55000000000000004*x200*x22 + x201*x205;
    H[94] = 0;
    H[95] = 0;
    H[96] = 0;
    H[97] = 0;
    H[98] = 0;
    H[99] = 0;
    H[100] = 0;
    H[101] = 0;
    H[102] = 0;
    H[103] = 0;
    H[104] = 0;
    H[105] = 0;
    H[106] = 0;
    H[107] = 0;
    H[108] = 0;
    H[109] = 0;
    H[110] = 0;
    H[111] = 0;
    H[112] = 0;
    H[113] = 0;
    H[114] = 0;
    H[115] = 0;
    H[116] = 0;
    H[117] = 0;
    H[118] = 0;
    H[119] = 0;
    H[120] = x41;
    H[121] = x50;
    H[122] = x62;
    H[123] = x63;
    H[124] = x67;
    H[125] = x68;
    H[126] = 0.044999999999999998*x81 + x86;
    H[127] = 0.044999999999999998*x49;
    H[128] = 0.044999999999999998*x96 + x99;
    H[129] = 0.044999999999999998*x87;
    H[130] = dq[2];
    // H[131] = (((dq[2]) > 0) - ((dq[2]) < 0));
    H[131] = std::tanh(100.0 * dq[2]);
    H[132] = x114;
    H[133] = x125;
    H[134] = x138;
    H[135] = x140;
    H[136] = x147;
    H[137] = x149;
    H[138] = 0.044999999999999998*x130 + x174;
    H[139] = 0.044999999999999998*x180 + x188;
    H[140] = 0.044999999999999998*x190 + x197;
    H[141] = 0.044999999999999998*x160 + x202;
    H[142] = 0;
    H[143] = 0;
    H[144] = 0;
    H[145] = 0;
    H[146] = 0;
    H[147] = 0;
    H[148] = 0;
    H[149] = 0;
    H[150] = 0;
    H[151] = 0;
    H[152] = 0;
    H[153] = 0;
    H[154] = 0;
    H[155] = 0;
    H[156] = 0;
    H[157] = 0;
    H[158] = 0;
    H[159] = 0;
    H[160] = 0;
    H[161] = 0;
    H[162] = 0;
    H[163] = 0;
    H[164] = 0;
    H[165] = 0;
    H[166] = 0;
    H[167] = 0;
    H[168] = 0;
    H[169] = 0;
    H[170] = 0;
    H[171] = 0;
    H[172] = 0;
    H[173] = 0;
    H[174] = 0;
    H[175] = 0;
    H[176] = 0;
    H[177] = 0;
    H[178] = 0;
    H[179] = 0;
    H[180] = x113;
    H[181] = x124;
    H[182] = x136;
    H[183] = x115;
    H[184] = x146;
    H[185] = x116;
    H[186] = x166 + 0.044999999999999998*x167;
    H[187] = 0.044999999999999998*x124;
    H[188] = x192 + 0.044999999999999998*x193;
    H[189] = 0.044999999999999998*x175;
    H[190] = dq[3];
    // H[191] = (((dq[3]) > 0) - ((dq[3]) < 0));
    H[191] = std::tanh(100.0 * dq[3]);

    for (int i = 0; i < 4; ++i) {               // row of H and W
        for (int j = 0; j < 30; ++j) {          // column of Pb and W
            double sum = 0.0;
            for (int k = 0; k < 48; ++k) {      // shared dimension
                double h_val = H[i * 48 + k];             // H[i][k] in row-major
                double pb_val = static_cast<double>(Pb[k * 30 + j]); // Pb[k][j] in row-major
                sum += h_val * pb_val;
            }
            W[i * 30 + j] = sum;  // W[i][j] in row-major
        }
    }

}


Eigen::MatrixXd calculate_W_eigen(const Eigen::VectorXd& q, 
                                  const Eigen::VectorXd& dq, 
                                  const Eigen::VectorXd& ddq) {
    // Ensure input size is 4
    assert(q.size() == 4 && dq.size() == 4 && ddq.size() == 4);

    // Convert Eigen::VectorXd to C-style array
    std::array<double, 4> q_arr, dq_arr, ddq_arr;
    for (int i = 0; i < 4; i++) {
        q_arr[i] = q(i);
        dq_arr[i] = dq(i);
        ddq_arr[i] = ddq(i);
    }

    // Output array (120 elements)
    std::array<double, 120> W_arr;

    // Call the C function
    calculate_W(q_arr.data(), dq_arr.data(), ddq_arr.data(), W_arr.data());

    Eigen::Map<Eigen::Matrix<double, 4, 30, Eigen::RowMajor>> W(W_arr.data());


    return W;
}

// End of code generation (regressor_W.h)
